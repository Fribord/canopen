%% -*- erlang -*-
%% 
%%  PDS-xxx node definitions
%% 
%%
{module, pds}.
{require, seazone}.

%% General configurations.

%% "output-type"
{enum, otype,
 [{none,    16#00},
  {onoff,   16#01},
  {dimmer,  16#02},
  {interval, 16#03},
  {moment,   16#04},
  {pulse,    16#05},
  {external, 16#06},
  {alwayson, 16#07},
  {input,    16#ff}
 ]}.

%% "output-type" for virtual output 9-16
{enum, votype,
 [{none, 16#00},
  {backlight,16#81},
  {block,    16#82},
  {onoff,   16#01},
  {interval, 16#03},
  {moment,   16#04},
  {pulse,    16#05},
  {alarm,    16#83}
 ]}.

%% "output-done" function
{enum, done_fn,
 [{stop,16#00},
  {restart,16#01},
  {repeat,16#02},
  {start_1,16#03},
  {start_2,16#04},
  {start_3,16#05},
  {start_4,16#06},
  {start_5,16#07},
  {start_6,16#08},
  {start_7,16#09},
  {start_8,16#0A},
  {start_9,16#0B},
  {start_10,16#0C},
  {start_11,16#0D},
  {start_12,16#0E},
  {start_13,16#0F},
  {start_14,16#10},
  {start_15,16#11},
  {start_16,16#12}
 ]}.

{enum, ramp_fn,
 [{none, 16#00},
  {linear, 16#01},
  {log, 16#02}
 ]}.

{enum, iflags,
 [{active, 16#0001},  %% input channel is active
  {analog, 16#0002},  %% accept analog values
  {digital,16#0004},  %% accept digital values
  {encoder,16#0008},  %% accept encoder values
  {analog_digital, 16#0010}, %% convert analog to digital
  {springback, 16#0020},     %% switch is springback
  {push_encoder,16#0040},    %% implements push encoder (when springback!)
  {inc_encoder, 16#0080},    %% increment push encoder
  {dec_encoder, 16#0100},    %% decrement push encoder
  {off_only, 16#0200},       %% match for "off" events only
  {on_only,  16#0400}         %% match for "on" events only
 ]}.


{enum, oflags,
 [{ctlmem, 16#0001},    %% save/restore control state 
  {ctldef, 16#0002},    %% control is default on
  {ctlact, 16#0004},    %% control active led
  {ctlinv, 16#0008},    %% control is inverted
  {stpmem, 16#0010},    %% save/restore step value
  {outact, 16#0020},    %% outA control activity
  {anself, 16#0040},    %% output duty analog to input
  {ancan,  16#0080},    %% output duty to can bus MSG_ANALOG
  {scale1a,16#0100},    %% power in range 0-1.5A,normal 0-15A
  {ondef,  16#0200},    %% output is ON by default
  {onmem,  16#0400}     %% output state is saved/restored
 ]}.


%% PDS-860 config items

{objdef, 16#2701,
 [{id, output_type},
  {name, "output-type"},
  {description, "Output channel type"},
  {struct, array},
  {entry, {1, 8},
   [{type, {enum,unsigned8,otype}},
    {category, optional},
    {access, rw}]},
  {entry, {9, 16},
   [{type, {enum,unsigned8,votype}},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2710,
 [{id, output_delay},
  {name, "output-delay"},
  {description, "pulse start delay in milliseconds"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned32},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2711,
 [{id, output_done},
  {name, "output-done"},
  {struct, array},
  {entry, {1, 16},
   [{type, {enum,unsigned8,done_fn}},
    {category, optional},
    {access, rw}]}
 ]}.

{objdef, 16#2712,
 [{id, output_wait},
  {name, "output-wait"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned32},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2713,
 [{id, output_waitmult},
  {name, "output-waitmult"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned32},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2714,
 [{id, output_repeat},
  {name, "output-repeat"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned16},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2715,
 [{id, output_rampup},
  {name, "output-rampup"},
  {description, "rampup time in milliseconds"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned32},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2716,
 [{id, output_rampdown},
  {name, "output-rampdown"},
  {description, "rampdown time in milliseconds"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned32},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2717,
 [{id, output_sustain},
  {name, "output-sustain"},
  {description, "sustain time in milliseconds when using pulse"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned32},
    {category, optional},
    {access, rw}]}
]}.


{objdef, 16#2718,
 [{id, output_alarm_low},
  {name, "output-arlam-low"},
  {description, "Low current alarm, given as percent of deviation from normal current."},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2719,
 [{id, output_alarm_high},
  {description, 
   "High current alarm. Input is cut off if above this level. Input is given as decimal times 10. Set to zero to disable. 75 means 7.5A"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#271A,
 [{id, output_prio},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
 ]}.

%% FIXME: add 271B, 271C, 271D, 271E

{objdef, 16#2780,
 [{id, output_deact},
  {name, "output-deact"},
  {description, "deactivation delay in milliseconds"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned32},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2781,
 [{id, output_step_max},
  {name, "output-step-max"},
  {description, "maximum encoder step value"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2782,
 [{id, output_step},
  {name, "output-step"},
  {description, "saved step value"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2783,
 [{id, output_control},
  {name, "output-control"},
  {description, "saved control value"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
]}.


{objdef, 16#2784,
 [{id, output_ctltype},
  {name, "output-ctltype"},
  {description, "saved control fnction"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2785,
 [{id, output_code},
  {name, "output-code"},
  {description, "output alarm code"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2786,
 [{id, output_loadf},
  {name, "output-loadf"},
  {description, "output load factor*10"},
  {struct, array},
  {entry, {1,16},
   [{type, integer8},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2787,
 [{id, output_ctlk},
  {name, "output-ctlk"},
  {description, "control k value"},
  {struct, array},
  {entry, {1,16},
   [{type, unsigned8},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#271F,
 [{id, output_flags},
  {name, "output-flags"},
  {struct, array},
  {entry, {1,16},
   [{type, {bitfield,unsigned16,oflags}},
    {category, optional},
    {access, rw}]}]}.


{objdef, 16#2720,
 [{id, input_flags},
  {name, "input-flags"},
  {struct, array},
  {entry, {1,32},
   [{type, {bitfield,unsigned16,iflags}},
    {category, optional},
    {access, rw}]}]}.

{objdef, 16#2721,
 [{id, input_out},
  {name, "input-out"},
  {struct, array},
  {entry, {1,32},
   [{type, unsigned32},
    {category, optional},
    {access, rw}
   ]}
  ]}.


{objdef, 16#2722,
 [{id, input_node},
  {name, "input-node"},
  {struct, array},
  {entry, {1,32},
   [{type, unsigned32},
    {category, optional},
    {access, rw}
   ]}
  ]}.

{objdef, 16#2723,
 [{id, input_channel},
  {name, "input-channel"},
  {struct, array},
  {entry, {1,32},
   [{type, unsigned8},
    {category, optional},
    {access, rw}
   ]}
  ]}.

{objdef, 16#2724,
 [{id, input_an_min},
  {name, "input-an-min"},
  {struct, array},
  {entry, {1,32},
   [{type, unsigned16},
    {category, optional},
    {access, rw}
   ]}
  ]}.

{objdef, 16#2725,
 [{id, input_an_max},
  {name, "input-an-max"},
  {struct, array},
  {entry, {1,32},
   [{type, unsigned16},
    {category, optional},
    {access, rw}
   ]}
  ]}.

{objdef, 16#2726,
 [{id, input_an_offset},
  {name, "input-an-offset"},
  {struct, array},
  {entry, {1,32},
   [{type, unsigned16},
    {category, optional},
    {access, rw}
   ]}
  ]}.

{objdef, 16#2727,
 [{id, input_an_scale},
  {name, "input-an-scale"},
  {description, "Scale input with a 8.8 fixnum"},
  {struct, array},
  {entry, {1,32},
   [{type, unsigned16},
    {category, optional},
    {access, rw}
   ]}
  ]}.

{objdef, 16#2728,
 [{id, input_ctl},
  {name, "input-ctl"},
  {struct, array},
  {entry, {1,32},
   [{type, unsigned32},
    {category, optional},
    {access, rw}
   ]}
  ]}.

{objdef, 16#2729,
 [{id, pamp},
  {name, "pamp"},
  {description, "power frame"},
  {struct, var},
  {type, boolean},
  {category, optional},
  {access, rw}]}.

{objdef, 16#272B,
 [{id, keyout},
  {name, "keyout"},
  {description, "Enable sending of menu keys"},
  {struct, var},
  {type, unsigned32},  %% boolean fixme!!
  {category, optional},
  {access, rw}]}.

%% TEMPORARY (none stored) objects for debugging and play

{objdef, 16#2702,
 [{id, pwm},
  {name, "output-pwm"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned16},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2703,
 [{id, reload},
  {name, "output-reload"},
  {description, "Set the PWM reload value"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned32},
    {range, {0, 15000000}},
    {category, optional},
    {access, rw}]}
]}.

{objdef, 16#2708,
 [{id, backlight},
  {name, "backlight"},
  {description, "Set the PWM value for the backlight"},
  {struct, var},
  {range, {0, 16#FFFF}},
  {category, optional},
  {access, wo}]}.

{objdef, 16#2709,
 [{id, ledlight},
  {name, "ledlight"},
  {description, "Set the PWM value for the ledlight"},
  {struct, var},
  {range, {0, 16#FFFF}},
  {category, optional},
  {access, wo}]}.


{objdef, 16#2704,
 [{id, led_green},
  {name, "led-green"},
  {struct, array},
  {entry, {1,8},
   [{type, boolean},
    {category, optional},
    {access, rw}]}
]}.


{objdef, 16#2706,
 [{id, led_green_mask},
  {name, "led-green-mask"},
  {struct, var},
  {type, unsigned32},
  {category, optional},
  {access, rw}
]}.

{objdef, 16#2730,
 [{id, vin},
  {name, "vin"},
  {description, "Input voltage in volts*100"},
  {struct, var},
  {type, unsigned16},
  {category, optional},
  {access, ro}]}.

{objdef, 16#2731,
 [{id, his},
  {name, "his"},
  {description, "Highside level voltage in volts*100"},
  {struct, var},
  {type, unsigned16},
  {category, optional},
  {access, ro}]}.

{objdef, 16#2732,
 [{id, temp},
  {name, "temp"},
  {description, "Internal temperature in celsius*10"},
  {struct, var},
  {type, integer16},
  {category, optional},
  {access, ro}]}.

{objdef, 16#2733,
 [{id, load},
  {name, "load"},
  {description, "Current load in Ampere*100"},
  {struct, var},
  {type, unsigned16},
  {category, optional},
  {access, ro}]}.

{objdef, 16#2734,
 [{id, an0},
  {name, "an0"},
  {description, "Analog-0 input"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned16},
    {access, ro}]}
]}.

{objdef, 16#2735,
 [{id, an1},
  {name, "an1"},
  {description, "Analog-1 input"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned16},
    {access, ro}]}
]}.

{objdef, 16#2736,
 [{id, an2},
  {name, "an2"},
  {description, "Analog-2 input"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned16},
    {access, ro}]}
]}.

%% First calibration value at 1A to convert analog to ampare
{objdef, 16#2737,
 [{id, w1a},
  {name, "w1a"},
  {description, "Analog calibration value at 1A"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned16},
    {access, rw}]}
]}.

%% Second calibration value at 10A to convert analog to ampare
{objdef, 16#2738,
 [{id, w10a},
  {name, "w10a"},
  {description, "Analog calibration value at 10A"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned16},
    {access, rw}]}
]}.

%% wna - analog nomial load value is used together with 
%% output_alarm_low to detect under-load (broken components)
%%
{objdef, 16#2739,
 [{id, wna},
  {name, "wna"},
  {description, "Analog nominal load value"},
  {struct, array},
  {entry, {1,8},
   [{type, unsigned16},
    {access, rw}]}
]}.

%% FIXME add 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747

%% end of pds
